import WalletConnectProvider from '@walletconnect/web3-provider'
import { providers } from 'ethers'
// import { useCallback, useEffect, useReducer } from 'react'
import WalletLink from 'walletlink'
import Web3Modal from 'web3modal'
// import { ellipseAddress, getChainData } from '../lib/utilities'

import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Link from 'next/link'
import UserProfile from '../utils/user'
import {fetchKeys} from '../utils/mailUtils'
import {useEffect, useState, useCallback} from 'react';
import Button from 'react-bootstrap/Button'
// import {getWeb3, initWeb3Modal} from '../utils/getWeb3'

const INFURA_ID = '460f40a260564ac4a4f4b3fffb032dad'

const providerOptions = {
  walletconnect: {
    package: WalletConnectProvider, // required
    options: {
      infuraId: INFURA_ID, // required
    },
  },
  'custom-walletlink': {
    display: {
      logo: 'https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0',
      name: 'Coinbase',
      description: 'Connect to Coinbase Wallet (not Coinbase App)',
    },
    options: {
      appName: 'Coinbase', // Your app name
      networkUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,
      chainId: 1,
    },
    package: WalletLink,
    connector: async (_, options) => {
      const { appName, networkUrl, chainId } = options
      const walletLink = new WalletLink({
        appName,
      })
      const provider = walletLink.makeWeb3Provider(networkUrl, chainId)
      await provider.enable()
      return provider
    },
  },
}

let web3Modal;
if (typeof window !== 'undefined') {
  web3Modal = new Web3Modal({
    network: 'mainnet', // optional
    cacheProvider: true,
    providerOptions, // required
  })
}


export default function Home() {
  const [web3, setWeb3] = useState(null);
  const [address, setAddress] = useState(null);

  const connect = useCallback(async function () {
    // This is the initial `provider` that is returned when
    // using web3Modal to connect. Can be MetaMask or WalletConnect.
    const provider = await web3Modal.connect()

    // We plug the initial `provider` into ethers.js and get back
    // a Web3Provider. This will add on methods from ethers.js and
    // event listeners such as `.on()` will be different.
    const web3Provider = new providers.Web3Provider(provider)

    const signer = web3Provider.getSigner()
    const address = await signer.getAddress()

    const network = await web3Provider.getNetwork()

    console.log({
      type: 'SET_WEB3_PROVIDER',
      provider,
      web3Provider,
      address,
      chainId: network.chainId,
    })
  }, [])

  // useEffect(() => {
    // window.ethereum ?
    //   ethereum.request({ method: "eth_requestAccounts" }).then((accounts) => {
    //     setAddress(accounts[0])
    //     let w3 = new Web3(ethereum)
    //     setWeb3(w3)
    //   }).catch((err) => console.log(err))
    // : console.log("Please install MetaMask")
  // }, [])

  // useEffect(() => {
  //   if (address && !UserProfile.getKeys()) {      
  //     userLogin();
  //     console.log(UserProfile.getKeys());
  //   }
  // }, []);

  // async function userLogin() {    
  //   UserProfile.setKeys(await fetchKeys(address));
  // }    

  const loginHandler = async () => {
    console.log('Using Web3 Modal');
    const web3 = await initWeb3Modal();
    // const web3 = await getWeb3();
    console.log(await web3.eth.getChainId());
    return;
    // window.ethereum ?
    //   ethereum.request({ method: "eth_requestAccounts" }).then((accounts) => {
    //     setAddress(accounts[0])
    //     let w3 = new Web3(ethereum)
    //     setWeb3(w3)
    //   }).catch((err) => console.log(err))
    // : console.log("Please install MetaMask")

    // console.log(address);
    // if (!UserProfile.getKeys()) {      
    //   userLogin(address);
    // }
  }

  return (
    <>
    <div className={styles.container}>
          <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <script src='https://cdnjs.cloudflare.com/ajax/libs/web3/1.6.1/web3.min.js'></script>
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
         Web3 Private Mail
        </h1>

        <div className={styles.grid}>
        <Button onClick={connect}>Login</Button>
        <span> - </span>
        <Link href="/inbox">
          <a>Inbox</a>
        </Link>
        <span> - </span>    
        <Link href="/sendMail">
          <a>Send Mail</a>
        </Link>
        <span> - </span>    
        <Link href="/test">
          <a> Test </a>
        </Link>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
    </>
  )
}
